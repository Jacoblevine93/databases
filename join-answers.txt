1. How do you find related data held in two separate data tables?

A: Using a primary and foreign key to connect the data and join them together.

2. Explain, in your own words, the difference between an INNER JOIN, LEFT OUTER JOIN, and RIGHT OUTER JOIN. Give a real-world example for each.

A: An inner join connects data from two tables. A Left outer join connects data from two tables and adds null where the left column does not have data on the right. The right outer join does the same for the left. 

3. Define primary key and foreign key. Give a real-world example for each.

A: A primary key is the unique identifier you will use to connect the data from the two columns, where the foreign key is in the table you are connecting. 

4. Define aliasing.

A: Aliasing is simplifying the table names for simpler use. 

5. Change this query so that you are using aliasing:

SELECT professor.name, compensation.salary,
compensation.vacation_days FROM professor JOIN
compensation ON professor.id =
compensation.professor_id;

A: 

SELECT p.name, c.salary, c.vacation_days
FROM professor AS p
JOIN compensation AS a
ON p.id = c.professor_id;

6. Why would you use a NATURAL JOIN? Give a real-world example.

A: It's much easier if you already know the columns you want to match and want all of them. An example would be any database where you're looking for all of the data in one table, plus one column in the other table.

7. Using this Employee schema and data, write queries to find the following information:

	- List all employees and all shifts.

	A: 

	SELECT e.id, e.name, s.date, s.start_time, s.end_time
	FROM employees AS e
	JOIN shifts AS s
	ON e.id = s.id;

8. Using this Adoption schema and data, please write queries to retrieve the following information and include the results:

	- Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.

	A: 

	SELECT v.first_name, v.last_name, d.name
	FROM volunteers AS v
	LEFT OUTER JOIN dogs AS d
	ON v.foster_dog_id = d.id;

	- The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the "Happy Tail" social media promotion which posts recent successful adoptions.

	A:

	SELECT a.first_name, a.last_name, c.name, ca.date
	FROM adopters AS a
	JOIN cats AS c
	ON a.id = c.id
	JOIN cat_adoptions AS ca
	ON ca.cat_id = c.id
	WHERE ca.date > now() - interval '1 month';

	- Create a list of adopters who have not yet chosen a dog to adopt.

	A:

	SELECT a.first_name, a.last_name
	FROM adopters AS a
	LEFT OUTER JOIN dog_adoptions AS da
	ON a.id = da.adopter_id
	WHERE da.adopter_id IS null;

	- Lists of all cats and all dogs who have not been adopted.

	A:

	SELECT c.name, ca.date
	FROM cats AS c
	LEFT OUTER JOIN cat_adoptions AS ca
	ON c.id = ca.cat_id
	WHERE ca.date IS null;

	SELECT d.name, da.date
	FROM dogs AS d
	LEFT OUTER JOIN dog_adoptions AS da
	ON d.id = da.dog_id
	WHERE da.date IS null;



	- The name of the person who adopted Rosco.

	A: 

	SELECT a.first_name, a.last_name
	FROM adopters AS a
	JOIN dog_adoptions AS da
	ON da.adopter_id = a.id
	JOIN dogs AS d
	ON d.id = da.dog_id
	WHERE d.name = 'Rosco';

9. Using this Library schema and data, write queries applying the following scenarios and include the results:

	- To determine if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons with a hold (request for a book with all copies checked out) on "Advanced Potion-Making".

	A: 

	SELECT p.name, h.rank
	FROM patrons AS p
	JOIN holds AS h
	ON h.id = p.id	
	JOIN books AS b
	ON h.isbn = b.isbn
	ORDER BY h.rank ASC;

	- List all of the library patrons. If they have one or more books checked out, list the books with the patrons.

	A:

	SELECT p.name, b.title
	FROM patrons AS P
	JOIN transactions AS t
	ON t.patron_id = p.id
	LEFT OUTER JOIN books AS b
	ON b.isbn = t.isbn
	WHERE checked_in_date IS null;